/*
 Coupled lamda/4 resonator.
 
 Coupling point is in the center of coupling area, being offset to the edge of protect layer towards the feedline.
 Schematic:
 
 ===================== <- feedline
  ________x________    <- resonator coupling area 
 |                         |   x - coupling (base) point
*/



#include "wiring.layout"

    int meanderSegmentLength = 7.4e6;

// Using the fit for ɛ=11.45 and claw length of ~70 um
double clawPhaseShift(double frequency) {
    return 0.014+1.436*frequency;
}
    
int length_from_frequency(double frequency, int mode_N) {
        return ((math::sqrt2/2*c/frequency/(math::sqrt(ɛ+1))/1e9)*1e6/2)*mode_N;
}

point findQubitPositionInMeanderStep(point stepStart, double residualDistanceToQubit, int resTurnRad) {
    /*
    This function only returns valid points if they will be located near the straight parts of the meander step
    */
/*    debug(residualDistanceToQubit, ", ", stepStart);    */
    if (residualDistanceToQubit<meanderSegmentLength) {
        return newPoint(stepStart.x()+residualDistanceToQubit, stepStart.y());
    }
    residualDistanceToQubit -= meanderSegmentLength + resTurnRad*math::pi;
    if (residualDistanceToQubit>0)
        return newPoint(stepStart.x()+meanderSegmentLength-residualDistanceToQubit, stepStart.y()-2*resTurnRad);
    else {
        return newPoint(0,0);
    }
} 

point drawMeanderStep(cell* curCell, int layer, point cursor, int meanderSegmentLength, int resTurnRad, int width) {
        point cursor2 = wire(curCell, layer, cursor, "r", meanderSegmentLength, width);
        cursor2 = torusTurn(curCell, layer, cursor2, "rd", resTurnRad, width);
        cursor2 = torusTurn(curCell, layer, cursor2, "dl", resTurnRad, width);
        cursor2 = wire(curCell, layer, cursor2, "l", meanderSegmentLength, width);
        cursor2 = torusTurn(curCell, layer, cursor2, "ld", resTurnRad, width);
        return torusTurn(curCell, layer, cursor2, "dr", resTurnRad, width);
}

pointArray generateStructure(cell* curCell, point cursor, int width, int length, int resTurnRad, int layer, doubleList relativeQubitPositions) {
    
        int curLength = 0;
        int tail_len = 300e3;
        int qubitCounter=0;
        pointArray finalQubitPositions;
        point start;
        start.set(cursor.x(), cursor.y());


    cursor = wire(curCell, layer, cursor, "l", meanderSegmentLength/2, width);
    curLength+=meanderSegmentLength/2;
    cursor = torusTurn(curCell, layer, cursor, "ld", resTurnRad, width);
    curLength+=resTurnRad*math::pi_2;
    cursor = torusTurn(curCell, layer, cursor, "dr", resTurnRad, width);
    curLength+=resTurnRad*math::pi_2;
    
    int meanderStepLength = 2*meanderSegmentLength+2*math::pi*resTurnRad;

    point cursor2;
    while ((length -curLength)>meanderStepLength) {
    
        if (qubitCounter < relativeQubitPositions.size()) {
            while (true) {
                if ((curLength+meanderStepLength > relativeQubitPositions.at(qubitCounter)*length)) {
                    finalQubitPositions.attachPoint(findQubitPositionInMeanderStep(cursor, relativeQubitPositions.at(qubitCounter)*length-curLength, resTurnRad));
                    qubitCounter+=1;
                    if (qubitCounter == relativeQubitPositions.size())
                        break;
                } else 
                    break;
            }
        }
        cursor = drawMeanderStep(curCell, layer, cursor, meanderSegmentLength, resTurnRad, width);
        curLength+=meanderStepLength;
    }
    
    if (length - curLength >= meanderSegmentLength+2*resTurnRad*math::pi_2) {
        cursor = wire(curCell, layer, cursor, "r", meanderSegmentLength, width);
        cursor = torusTurn(curCell, layer, cursor, "rd", resTurnRad, width);
        cursor = torusTurn(curCell, layer, cursor, "dl", resTurnRad, width);
        curLength+= meanderSegmentLength+2*resTurnRad*math::pi_2;
        if (length - curLength >= meanderSegmentLength) {
            cursor = wire(curCell, layer, cursor, "l", meanderSegmentLength, width);
            curLength += meanderSegmentLength;
            cursor = torusArbAngleTurn(curCell, layer, cursor, "ld", resTurnRad, width, (length-curLength)/2/math::pi/resTurnRad*360);
        } else {
            cursor = wire(curCell, layer, cursor, "l", length - curLength, width);
        }
    } else if (length - curLength >= meanderSegmentLength) {
        cursor = wire(curCell, layer, cursor, "r", meanderSegmentLength, width);
        curLength+=meanderSegmentLength;
        cursor = torusArbAngleTurn(curCell, layer, cursor, "rd", resTurnRad, width, (length-curLength)/2/math::pi/resTurnRad*360);
    } else {
        cursor = wire(curCell, layer, cursor, "r", length - curLength, width);
        curLength+=length - curLength;
    }
    return finalQubitPositions;
}

pointArray addResonator(cell* curCell, point couplingPoint, int w_res, int g_res, double frequency, int mode_N, string direction, doubleList relativeQubitPositions) {
   
        point cursor;
        cursor.set(couplingPoint.x(), couplingPoint.y()-w_res/2 - g_res);
        int length = length_from_frequency(frequency, mode_N)*1e3;
        int resTurnRad = 20*w_res;
    
    generateStructure(curCell, cursor, w_res, length, resTurnRad, aux2, relativeQubitPositions);
    pointArray finalQubitPositions = generateStructure(curCell, cursor, w_res+2*g_res, length+4*w_res, resTurnRad, aux3, relativeQubitPositions);    
    
    rotateLayer(curCell, aux2, couplingPoint, angleFromDirection(direction));
    rotateLayer(curCell, aux3, couplingPoint, angleFromDirection(direction));
    for (int i=0; i<finalQubitPositions.size(); i++) {
        point relativeToAnchor = newPoint(finalQubitPositions.point(i).x()-couplingPoint.x(),finalQubitPositions.point(i).y()-couplingPoint.y());
        finalQubitPositions.setPoint(i, rotateVector(relativeToAnchor, couplingPoint, direction));
    }
    
    
    layout->booleanTool->boolOnLayer(M, aux2, M, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(protect, aux3, protect, "A+B", 0, 0, 0);
    
    clearAllAuxiliaryAux(curCell);
    
    return finalQubitPositions;
}

