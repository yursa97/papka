#!/usr/bin/layout
#name=XMon resonators
#help=Creates XMon resonator design

#include "wiring.layout"
#include "auxx.layout"
#include "layersSetup.layout"
#include "resonator.layout"
#include "feedline.layout"
#include "claw.layout"
#include "Xmon.layout"
#include "qr_resonators111015.layout"
#include "idc.layout"

        int M = 0;
        int M1 = 1;
        int protect = 2;
        int ground = 3;
        int mask = 4;
        int total = 5;
        int aux = 6;
        int aux2 = 7;
        int aux3 = 8;
        int aux4 = 9;

        
        int chip_height = 5e6;
        int chip_width = 10e6;
        int border = 50e3;
        
        int feedlineDepth = 5e6/4;
        double É› = 11.45;
        double c = 299792458.0;

        doubleList res_freqs;
        
        int w_res =7e3;
        int g_res = 4e3;
        int x = 5e3;
        int tailLen = 1000e3;
        int w_thinGround = 5e3;
        int L_claw = 60e3;
        int w_claw = 20e3;
        
        int w_feed = 16e3;
        int g_feed = 8e3;
      
        int w_q = 20e3;
        int g_q = 20e3;
        int arm_len = 300e3;

        int qrSize = 500e3;
        int qrCodePositionX = chip_width/2*9/10-qrSize;
        int qrCodePositionY = chip_height/2*9/10-qrSize;


int main() {
    setupLayers();
    layout->drawing->selectAll();
    layout->drawing->deleteSelect();
    layout->drawing->deselectAll();

        cell *curCell = layout->drawing->currentCell;
        int i;
    
    // Making a test resonator to see it's actual x-projection length to be able to center it with respect to the origin
    point cursor = addHalfwaveTransmissionResonator(curCell, newPoint(0,0), 7e3, 4e3, 6, "r");
    int resonator_actual_x_length = cursor.x();
    // Deleting the test resonator (whole M and protect layers get removed)
    clearLayer(curCell, M);
    clearLayer(curCell, protect);
    
    //Adding the real resonator this time with its center at the origin    
    cursor = addHalfwaveTransmissionResonator(curCell, newPoint(-resonator_actual_x_length/2, 0), 7e3, 4e3, 6, "r");
    
    
            int l_tooth = 50e3;
            int w_tooth = 2.5e3;
            int w_gap= 7.5e3;
            int transition_len = 50e3;
            int n_teeth = 4;
            
    point feedline_start_left = newPoint(-resonator_actual_x_length/2-transition_len-w_tooth, 0);
    addIDC(curCell, feedline_start_left, w_feed, g_feed, transition_len, w_tooth, w_gap, l_tooth, n_teeth, "r", false);
    
    intList segmentLengths;
    segmentLengths.append(chip_width/2 + feedline_start_left.x());
    
    stringList directions;
    directions.append("l");
    
    addFeedline(curCell, feedline_start_left, w_feed, g_feed, segmentLengths, directions, "cd");
    
    point feedline_start_right = newPoint(cursor.x()+transition_len+w_tooth, cursor.y());
    addIDC(curCell, feedline_start_right, w_feed, g_feed, transition_len, w_tooth, w_gap, l_tooth, n_teeth, "l", false);
    
    stringList directions;
    directions.append("r");
    
    addFeedline(curCell, feedline_start_right, w_feed, g_feed, segmentLengths, directions, "cd");
    
    // Ground plane
    curCell->addBox(-chip_width/2, -chip_height/2, chip_width, chip_height, ground);
    
    // Fot the liftoff designs
    layout->booleanTool->boolOnLayer(ground, protect, mask, "A-B", 0, 0, 0); 
    layout->booleanTool->boolOnLayer(M, mask, total, "A+B", 0, 0, 0);
   
    
/*    debug.show();*/
/*    debug.clear();*/
    
}
