/*
 Coupled lamda/4 resonator.
 
 Coupling point is in the center of coupling area, being offset to the edge of protect layer towards the feedline.
 Schematic:
 
 ===================== <- feedline
  ________x________    <- resonator coupling area 
 |                         |   x - coupling (base) point
*/



#include "wiring.layout"

    int meanderSegmentLength = 250e3;

// Using the fit for ɛ=11.45 and claw length of ~70 um
double clawPhaseShift(double frequency) {
    return 0.014+1.436*frequency;
}
    
int length_from_frequency(double frequency, bool claw) {
    if (claw)
        return (math::sqrt2/2*c/frequency/(math::sqrt(ɛ+1))/1e9/2)*1e6 - 1./180.*clawPhaseShift(frequency)/frequency/1e9*c/2/math::sqrt(ɛ/2.+1./2.)/2.*1e6;
    else
        return (math::sqrt2/2*c/frequency/(math::sqrt(ɛ+1))/1e9/2)*1e6;
}


point drawMeanderStep(cell* curCell, int layer, point cursor, int meanderSegmentLength, int resTurnRad, int width) {
        
        point cursor2 = wire(curCell, layer, cursor, "r", meanderSegmentLength, width);
        cursor2 = torusTurn(curCell, layer, cursor2, "rd", resTurnRad, width);
        cursor2 = torusTurn(curCell, layer, cursor2, "dl", resTurnRad, width);
        cursor2 = wire(curCell, layer, cursor2, "l", meanderSegmentLength, width);
        cursor2 = torusTurn(curCell, layer, cursor2, "ld", resTurnRad, width);
        return torusTurn(curCell, layer, cursor2, "dr", resTurnRad, width);
}

void generateStructure(cell* curCell, point cursor,  int width, int tailLen, int length,  int resTurnRad, int layer) {
    
    int curLength = 0;
    point start;
    start.set(cursor.x(), cursor.y());
    
    cursor = wire(curCell, layer, cursor, "r", 200e3, width);
    curLength+=200e3;
    cursor = torusTurn(curCell, layer, cursor, "rd", resTurnRad, width);
    curLength+=resTurnRad*math::pi_2;
    cursor = wire(curCell, layer, cursor, "d", tailLen, width);
    curLength+=tailLen;
    
    cursor.set(start.x(), start.y());
    
    cursor = wire(curCell, layer, cursor, "l", 200e3, width);
    curLength+=200e3;
    cursor = torusTurn(curCell, layer, cursor, "ld", resTurnRad, width);
    curLength+=resTurnRad*math::pi_2;
    cursor = wire(curCell, layer, cursor, "d", 50e3, width);
    curLength+=50e3;
    cursor = torusTurn(curCell, layer, cursor, "dr", resTurnRad, width);
    curLength+=resTurnRad*math::pi_2;
    
    int meanderStepLength = 2*meanderSegmentLength+2*math::pi*resTurnRad;

    point cursor2;
    while ((length -curLength)>meanderStepLength) {
        cursor = drawMeanderStep(curCell, layer, cursor, meanderSegmentLength, resTurnRad, width);
        curLength+=meanderStepLength;
    }
    
    if (length - curLength >= meanderSegmentLength+2*resTurnRad*math::pi_2) {
        cursor = wire(curCell, layer, cursor, "r", meanderSegmentLength, width);
        cursor = torusTurn(curCell, layer, cursor, "rd", resTurnRad, width);
        cursor = torusTurn(curCell, layer, cursor, "dl", resTurnRad, width);
        curLength+= meanderSegmentLength+2*resTurnRad*math::pi_2;
        if (length - curLength >= meanderSegmentLength) {
            cursor = wire(curCell, layer, cursor, "l", meanderSegmentLength, width);
            curLength += meanderSegmentLength;
            cursor = torusArbAngleTurn(curCell, layer, cursor, "ld", resTurnRad, width, (length-curLength)/2/math::pi/resTurnRad*360);
        } else {
            cursor = wire(curCell, layer, cursor, "l", length - curLength, width);
        }
        
    } else if (length - curLength >= meanderSegmentLength) {
        cursor = wire(curCell, layer, cursor, "r", meanderSegmentLength, width);
        curLength+=meanderSegmentLength;
        cursor = torusArbAngleTurn(curCell, layer, cursor, "rd", resTurnRad, width, (length-curLength)/2/math::pi/resTurnRad*360);
    } else {
        cursor = wire(curCell, layer, cursor, "r", length - curLength, width);
        curLength+=length - curLength;
    }
}


point addResonator(cell* curCell, point couplingPoint, int w_res, int g_res, double frequency, int tailLen, string direction, bool galvanic_test) {
   
    point cursor;
    cursor.set(couplingPoint.x(), couplingPoint.y()-w_res/2 - g_res);
    int length = length_from_frequency(frequency, 0)*1e3;
    
    int resTurnRad = 8*w_res;
    if (galvanic_test==1) {
        generateStructure(curCell, cursor, w_res, tailLen-g_res, length-g_res, resTurnRad, aux2);
        generateStructure(curCell, cursor, w_res+2*g_res, tailLen, length+g_res, resTurnRad, aux3);
        point galvanic_contact_point = newPoint(couplingPoint.x() + 200e3+resTurnRad, couplingPoint.y()-(w_res/2+resTurnRad+tailLen)+2*g_res);
        wire(curCell, aux4, galvanic_contact_point, "d", 5*g_res, 2e3);
        wire(curCell, bandage, galvanic_contact_point, "d", 2*g_res*0.9, w_res*0.8);
        wire(curCell, bandage, newPoint(galvanic_contact_point.x(), galvanic_contact_point.y()-5*g_res)
        , "u", 2*g_res*0.9, w_res*0.8);
        
    } else {
        generateStructure(curCell, cursor, w_res, tailLen, length, resTurnRad, aux2);
        generateStructure(curCell, cursor, w_res+2*g_res, tailLen, length+g_res, resTurnRad, aux3);
    }
    
    
    rotateLayer(curCell, aux2, couplingPoint, angleFromDirection(direction));
    rotateLayer(curCell, aux3, couplingPoint, angleFromDirection(direction));
    rotateLayer(curCell, aux4, couplingPoint, angleFromDirection(direction));
    
    if (direction=="u") {
        mirrorLayer(curCell, aux2, couplingPoint, newPoint(couplingPoint.x(), couplingPoint.y()+100e3));
        mirrorLayer(curCell, aux3, couplingPoint, newPoint(couplingPoint.x(), couplingPoint.y()+100e3));
        mirrorLayer(curCell, aux4, couplingPoint, newPoint(couplingPoint.x(), couplingPoint.y()+100e3));
    }
        
    layout->booleanTool->boolOnLayer(aux2, aux2, M, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(aux3, aux3, protect, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(aux4, aux4, M1, "A+B", 0, 0, 0);
    
    clearAllAuxiliaryAux(curCell);
    
    point retPoint;
    retPoint.set(200e3+resTurnRad, -(g_res+w_res/2+resTurnRad+tailLen));
    retPoint = rotateVector(retPoint, couplingPoint, direction);
    
    if (galvanic_test == 1) {
        addLocalAlignmentMarkBMSTU(curCell, newPoint(retPoint.x()-100e3, retPoint.y()-100e3));
        addLocalAlignmentMarkBMSTU(curCell, newPoint(retPoint.x()+100e3, retPoint.y()-100e3));
        addLocalAlignmentMarkBMSTU(curCell, newPoint(retPoint.x()+100e3, retPoint.y()+100e3));
        addLocalAlignmentMarkBMSTU(curCell, newPoint(retPoint.x()-100e3, retPoint.y()+100e3));
    }
    return retPoint;
}


