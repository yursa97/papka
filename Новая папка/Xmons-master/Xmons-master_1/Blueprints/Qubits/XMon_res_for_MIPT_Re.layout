#!/usr/bin/layout
#name=XMon resonators
#help=Creates XMon resonator design

#include "../lib/wiring.layout"
#include "../lib/auxx.layout"
#include "../lib/layersSetup.layout"
#include "../lib/resonator.layout"
#include "../lib/feedline.layout"
#include "../lib/claw.layout"
#include "../lib/Xmon.layout"
#include "../lib/test_JJ.layout"
#include "../lib/alignment_mark.layout"
#include "qr_mipt_re.layout"

        int M = 0;
        int M1 = 1;
        int protect = 2;
        int ground = 3;
        int mask = 4;
        int total = 5;
        int aux = 6;
        int aux2 = 7;
        int aux3 = 8;
        int aux4 = 9;
        int qr = 10;

        
        int chip_height = 4e6;
        int chip_width = 9e6;
        int border=50e3;
        
        int feedlineDepth = chip_height/4;
        double É› = 10.36;
        double c = 299792458.0;

        doubleList res_freqs;        
        doubleList test_res_freqs;
        
        int w_res =7e3;
        int g_res = 4e3;
        int x = 5e3;
        int tailLen = 1000e3;
        int w_thinGround = 5e3;
        int L_claw = 60e3;
        int w_claw = 20e3;
        
        int w_feed = 16e3;
        int g_feed = 8e3;
      
        int w_q = 20e3;
        int g_q = 20e3;
        int arm_len = 300e3;

        int qrSize = 500e3;
        int qrCodePositionX = chip_width/2*8/10-qrSize;
        int qrCodePositionY = chip_height/2*8/10-qrSize;


int main() {
    setupLayers();
    layout->drawing->selectAll();
    layout->drawing->deleteSelect();
    layout->drawing->deselectAll();

        
    string sample_name = layout->getText("Sample name","Please enter the sample name:", "Xmon Re MIPT");
    
        int i;
    
    cell *curCell = layout->drawing->currentCell;
    point cursor;
    
    intList segmentLengths;
    stringList directions;
    directions.append("r");
    
    segmentLengths.append(chip_width);
    cursor.set(-chip_width/2, 0);
    addFeedline(curCell, cursor, w_feed, g_feed, segmentLengths, directions, "cp");
   
   
    // Ground plane
    curCell->addBox(-chip_width/2, -(chip_height)/2, chip_width, chip_height, ground);
    
    int resonatorPositionsX = -chip_width/5;
    int resonatorPositionsY = -chip_height/4+feedlineDepth-w_feed/2-g_feed-x;
    res_freqs.append(7); res_freqs.append(7.1); res_freqs.append(7.2); res_freqs.append(7.3); res_freqs.append(7.4); res_freqs.append(7.5);
    test_res_freqs.append(8); test_res_freqs.append(8.25);

    element* marker;
    point test_cursor = addResonator(curCell, newPoint(-chip_width/2+chip_width/6, -resonatorPositionsY+5*x), w_res, g_res, test_res_freqs.at(0), 0.5e6, "u", 0);
    marker = curCell->addText(protect, newPoint(test_cursor.x()-300e3, test_cursor.y()+500e3), "TI");
    test_cursor = addResonator(curCell, newPoint(chip_width/2-chip_width/6, resonatorPositionsY-5*x), w_res, g_res, test_res_freqs.at(1), 1e6, "d", 0);
    marker = curCell->addText(protect, newPoint(test_cursor.x()-300e3, test_cursor.y()), "TII");
        
    double j = -0.25;
    int k = 0;
    point cursor2;
    point cursor3;
    for (i=0; i<5; i+=2){
        cursor.set(resonatorPositionsX+chip_width/5*j, resonatorPositionsY);
        cursor2 = addResonator(curCell, cursor, w_res, g_res, res_freqs.at(k), tailLen, "d", 1);
        cursor2 = addClaw(curCell, cursor2, "d");

        cursor3.set(cursor2.x()-400e3, cursor2.y());
        marker = curCell->addText(protect, cursor3, roman(k+1));
        cursor2 = addXmon(curCell, cursor2, "d", 200, 100);
        
        cursor.set(resonatorPositionsX+chip_width/5*(1.*j+0.5), -resonatorPositionsY);
        cursor2 = addResonator(curCell, cursor, w_res, g_res, res_freqs.at(k+1), tailLen, "u", 1);
        cursor2 = addClaw(curCell, cursor2, "u");
        cursor3.set(cursor2.x()-400e3, cursor2.y());
        marker = curCell->addText(protect, cursor3, roman(k+2));
        cursor2 = addXmon(curCell, cursor2, "u", 200, 100);
        
        stringList directions; 
        
        j++;
        k+=2;
    }
    curCell->textToPolygon(100e3);

    marker = curCell->addText(protect, newPoint(chip_width/2-2000e3, chip_height/2), sample_name);    
    curCell->textToPolygon(200e3);

    addQR(curCell, qrCodePositionX+1.5e6,qrCodePositionY, qrSize, qrSize, qr);
    
    addTestSquid(curCell, newPoint(-chip_width/2+0.5e6, 1e6), 200, 100, false);
    addTestSquid(curCell, newPoint(chip_width/2-0.5e6, 1e6), 200, 100, false);
    addTestSquid(curCell, newPoint(-chip_width/2+0.5e6, -1e6), 200, 100,false);
    addTestSquid(curCell, newPoint(chip_width/2-0.5e6, -1e6), 200, 100, false);
    
    addAlignmentMark(curCell, newPoint(chip_width/2-0.5e6, -1.75e6));

    addAlignmentMark(curCell, newPoint(-chip_width/2+0.5e6, -1.75e6));
    addAlignmentMark(curCell, newPoint(-chip_width/2+0.5e6, 1.75e6));
    
    layout->booleanTool->boolOnLayer(ground, protect, mask, "A-B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(M, mask, total, "A+B", 0, 0, 0);
/*    layout->booleanTool->boolOnLayer(M1, total, total, "A+B", 0, 0, 0);*/
/*    clearLayer(curCell, M1);*/
/*    layout->booleanTool->boolOnLayer(protect, M, total, "A-B", 0, 0, 0);*/
/*    curCell->addBox(-chip_width/2-border, -chip_height/2-border, chip_width+border*2, chip_height+border*2, aux);*/
/*    layout->booleanTool->boolOnLayer(aux, ground, total, "A-B", 0, 0, 0);*/
/*    clearLayer(curCell, aux);*/

    
    int hd;
    layout->backgroundTool->clearBackground();
/*    hd = layout->backgroundTool->addBackground("background.png");*/
/*    layout->backgroundTool->backgroundOffset(hd, -5682e3, 2950e3);*/
/*    layout->backgroundTool->backgroundScale(hd, 8.3e3, 8.3e3);*/
    clearLayer(curCell, mask);
    clearLayer(curCell, M);
    clearLayer(curCell, protect);
    clearLayer(curCell, ground);
    //debug.show();
    //debug.clear();
    
    
    
}
